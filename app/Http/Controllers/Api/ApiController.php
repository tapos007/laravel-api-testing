<?phpnamespace App\Http\Controllers\Api;use App\Http\Requests;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Response;use Illuminate\Support\Facades\Validator;/** * Class ApiController * @package App\Api\Controllers */class ApiController extends Controller{    /**     * @var int     */    protected $statusCode = 200;    protected $customStatusCode = 0;    /**     * @var bool     */    protected $statusMessage = false;    /**     * @var bool     */    protected $paginateData = false;    protected $countData = false;    protected $dataType = false;    protected $userId = false;    protected $configErrorCode = false;    protected $errorType = false;    protected $httpHeader = false;    protected $createdId = false;    protected $postId = false;    public function setHttpHeader($header)    {        if ($header) {            $this->httpHeader = $header;        }        return $this;    }    public function getHttpHeader()    {        return $this->httpHeader;    }    /**     * @return mixed     */    public function getPaginateData()    {        return $this->paginateData;    }    /**     * @param mixed $paginateData     * @return $this     */    public function setPaginateData($paginateData)    {        if (is_array($paginateData)) {            $paginate = [                'current' => (int)$paginateData['current_page'],                'total' => (int)$paginateData['total'],                'per_page' => (int)$paginateData['per_page'],            ];//            $paginate  = remove_empty($paginate);            $this->paginateData = $paginate;        }        return $this;    }    public function getCreatedId()    {        return $this->createdId;    }    /**     * @param mixed $createdId     * @return $this     */    public function setCreatedId($createdId)    {        $this->createdId = $createdId;        return $this;    }    /**     * @return mixed     */    public function getStatusCode()    {        return $this->statusCode;    }    /**     * @param mixed $statusCode     * @return $this     */    public function setStatusCode($statusCode)    {        $this->statusCode = $statusCode;        return $this;    }    public function setCustomStatusCode($customStatusCode)    {        $this->customStatusCode = $customStatusCode;        return $this;    }    public function getCustomStatusCode()    {        return $this->customStatusCode;    }    /**     * @param mixed $userId     * @return $this     */    public function setUserId($userId)    {        $this->userId = $userId;        return $this;    }    /**     * @return boolean     */    /**     * @param boolean $countData     * @return $this     */    public function setCountData($countData)    {        if (is_numeric($countData)) {            $this->countData = $countData;        }        return $this;    }    public function getCountData()    {        return $this->countData;    }    public function getUserId()    {        return $this->userId;    }    /**     * @return boolean     */    /**     * @param boolean $dataType     * @return $this     */    public function setDataType($dataType)    {        $this->dataType = $dataType;        return $this;    }    public function getDataType()    {        return $this->dataType;    }    public function getPostId()    {        return $this->postId;    }    /**     * @return mixed     */    public function getErrorCode()    {        return $this->configErrorCode;    }    /**     * @param mixed $errorCode     * @return $this     */    public function setErrorCode($errorCode)    {        $this->configErrorCode = $errorCode;        return $this;    }    public function setErrorType($message)    {        $this->errorType = $message;        return $this;    }    public function getErrorType()    {        return $this->errorType;    }    /**     * @return string     */    public function getStatusMessage()    {        return $this->statusMessage;    }    /**     * @param string $statusMessage     * @return $this     */    public function setStatusMessage($statusMessage)    {        $this->statusMessage = $statusMessage;        return $this;    }    /**     * @param string $message     * @return mixed     */    public function respondNotFound($message = 'Not Found!')    {        return $this->setStatusCode(200)->respondWithError($message);    }    //return $this->respondNotFound('Cannot create the profile');    /**     * Respond with error message when no data found     *     * @param string $message     * @return mixed     */    public function respondWithEmptyData($message = 'Not Found!')    {        return $this->setStatusCode(200)->respondWithErrorMessage($message);    }    /**     * @param $message     * @return mixed     */    public function respondWithErrorMessage($message)    {        if ($this->getErrorType()) {            $respond['error']['message'] = $this->getErrorType();        }        $respond['error']['error'] = $message;        if ($this->getErrorCode()) {            $respond['status'] = $this->getErrorCode();        }        return $this->respond($respond);    }    /**     * @param array $data     * @return mixed     */    public function respondWitSuccess(array $data)    {        if ($this->getCountData()) {            $respond['data']['total'] = $this->getCountData();        }        if ($this->getUserId()) {            $respond['data']['user_id'] = $this->getUserId();        }        if ($this->getPostId()) {            $respond['data']['post_id'] = $this->getPostId();        }        if ($this->getDataType()) {            $respond['data'][$this->getDataType()] = $data;        } else {            $respond['data'] = $data;        }        if ($this->getPaginateData()) {            if ($this->getDataType()) {                $respond['data']['paginate'] = $this->getPaginateData();            } else {                $respond['paginate'] = $this->getPaginateData();            }            if ($this->getCountData()) {                $respond['data']['total'] = $respond['data']['paginate']['total'];            }        }        $respond['status'] = $this->getStatusCode();        return $this->respond($respond);    }    /**     * @param string $message     * @return mixed     */    public function respondInternalError($message = 'Internal Error!')    {        return $this->setStatusCode(200)->respondWithError($message);    }    //return $this->respondInternalError('Internal Error');    /**     * @param string $message     * @return mixed     */    public function respondSuccessMessage($message = 'Successfully Done')    {//        return $this->setStatusCode(200)->respondWithSuccessMessage($message);        if ($this->customStatusCode) {            return $this->setStatusCode($this->customStatusCode)->respondWithSuccessMessage($message);        }        return $this->setStatusCode(200)->respondWithSuccessMessage($message);    }    /**     * @param $data     * @param array $headers     * @return mixed     */    public function respond($data, $headers = [])    {        if ($this->getHttpHeader()) {            return Response::json($data, 200, $headers);        }        return Response::json($data, 200, $headers);    }    /**     * @param $message     * @return mixed     */    public function respondWithError($message)    {        $respond['error']['message'] = $message;        if ($this->getErrorCode()) {            $respond['status'] = $this->getCustomStatusCode();        }        //$respond['error']['status'] = $this->getStatusCode();        return $this->respond($respond);    }    /**     * @param array $data     * @return mixed     */    public function respondWithSuccess(array $data)    {        if ($this->getCountData()) {            $respond['data']['total'] = $this->getCountData();        }        if ($this->getUserId()) {            $respond['data']['user_id'] = $this->getUserId();        }        if ($this->getDataType()) {            $respond['data'][$this->getDataType()] = $data;        } else {            $respond['data'] = $data;        }        if ($this->getPaginateData()) {            if ($this->getDataType()) {                $respond['data']['paginate'] = $this->getPaginateData();            } else {                $respond['paginate'] = $this->getPaginateData();            }            if ($this->getCountData()) {                $respond['data']['total'] = $respond['data']['paginate']['total'];            }        }        if ($this->getCustomStatusCode()) {            $respond['status'] = $this->getCustomStatusCode();        }        return $this->respond($respond);    }    public function respondSuccessData(array $data)    {        if ($this->getDataType()) {            $respond[$this->getDataType()] = $data;        } else {            $respond['data'] = $data;        }        $respond['status'] = $this->getStatusCode();        return $this->respond($respond);    }    public function respondWithCreated($message = "Created successfully")    {        return $this->setStatusCode(201)->respondWithSuccessMessage($message);    }    public function respondNoContent($message = "Content not found !")    {        return $this->setStatusCode(204)->respondWithSuccessMessage($message);    }    /**     * @param $error     * @return mixed     */    public function respondValidationMessage($error)    {        if ($this->getStatusMessage()) {            $data['message'] = $this->getStatusMessage();        }        $data['error'] = $error;        if ($this->getErrorCode()) {            $data['error_code'] = $this->getErrorCode();        }        $data['status'] = $this->getStatusCode();        return $this->respond($data);    }    public function respondWithValidationError($error)    {    }    /**     * @param $message     * @return mixed     */    public function respondWithSuccessMessage($message)    {        return $this->respond([            'success' => [                'message' => $message,            ],            'status' => $this->getStatusCode()        ]);    }    /**     * @param $message     * @return mixed     */    public function respondForConnect($message)    {        return $this->respond([            'response' => [                'message' => $message,                'status' => $this->getStatusCode()            ]        ]);    }    public function respondWithCreatedId($message, $id)    {        $respond['success']['message'] = $message;        if ($this->getDataType()) {            $respond['success'][$this->getDataType()] = $id;        }        $respond['success']['status'] = $this->getStatusCode();        return $respond;    }    public function respondWithCreatedSuccessfully($message, $createdIdText = '')    {        $respond['success']['message'] = ($this->getDataType()) ? $this->getDataType() . ' successfully.' : $message;        if ($this->getCreatedId()) $respond['success'][$createdIdText] = $this->getCreatedId();        $respond['status'] = $this->getCustomStatusCode();        return $respond;    }    public function respondCreateProfile($message, $id, $uuid)    {        $respond['success']['message'] = $message;        if ($this->getDataType()) {            $respond['success'][$this->getDataType()] = $id;            $respond['success']['uuid'] = $uuid;        }        $respond['success']['status'] = $this->getStatusCode();        return $respond;    }    /**     * Check whether a profile is valid or not.     *     * @return \Illuminate\Http\Response     */    public function checkValidProfile($profile_id)    {        $data = Profile::find($profile_id);        if ($data) return true;        else return false;    }    private function messageSet($data, $statusCode)    {        if (isset($data['error_code'])) {            return $this->setErrorCode($data['error_code'])->setStatusCode($statusCode)->setHttpHeader(200)->respondWithError($data['message']);        } else {            return $this->setStatusCode($statusCode)->setHttpHeader(200)->respondWithError($data['message']);        }    }    /**     * @param $request     * @param $rules     *     * Check Input validation for any contact     *     * @return bool     */    protected function InputValidator($request, $rules)    {        $validator = Validator::make($request->all(), $rules);        return $validator;    }    public function notFoundAnyRoute()    {        return $this->respond([            'error' => [                'message' => 'Not a right uri',                'status' => 400            ]        ]);    }    public function respondWhenDeleted($message, $extraParams = [])    {        $respond['success']['message'] = $message;        $respond['success']['status'] = $this->getStatusCode();        if (!empty($extraParams))            $respond['success'] += $extraParams;        return $respond;    }    /**     * @param $data     * @return mixed     */    protected function processResponse($data)    {        switch ($data['error']) {            case RESPOND_WITH_ERROR;                return $this->messageSet($data, '400');                break;            case 2:                return $this->messageSet($data, '401');                break;            case RESPOND_WITH_PROCESSING_ERROR:                return $this->messageSet($data, '500');                break;            case RESPOND_WITH_SUCCESS:                return $this->respondSuccessMessage($data['message']);            default:                return $this->respondSuccessMessage($data['message']);        }    }    public function validateInput($input, $rules)    {        return Validator::make($input, $rules);    }}